name: Create Atom Component
on:
  issues:
    types: [opened]

jobs:
  issue_handler:
    if: contains(github.event.issue.labels.*.name, 'create-atom')
    runs-on: ubuntu-latest
    steps:
      - name: Print issue information
        id: setup
        run: |
          ORG_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f1)
          echo "::set-output name=ORG_NAME::$ORG_NAME"
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          echo "::set-output name=REPO_NAME::$REPO_NAME"
          echo "Creating Atom Component for: ${ORG_NAME}/${REPO_NAME}"

          SYSTEM_PROMPT="You are a react component generator I will feed you a markdown file that contains a component name and description your job is to create a nextjs component using typescript and tailwind. Please include a default export & export the Prop as a typescript type. Do not add any additional libraries or dependencies. Your response should only have 1 tsx code block which is the implementation of the component."
          SYSTEM_MESSAGE='{"role":"system","content":"'"$SYSTEM_PROMPT"'"}'
          echo "SYSTEM: $SYSTEM_PROMPT"
          echo "::set-output name=SYSTEM_MESSAGE::$SYSTEM_MESSAGE"

          ESCAPED_ISSUE_BODY=$(echo "${{ github.event.issue.body }}" | awk '{printf "%s\\n", $0}')
          USER_MESSAGE='{"role":"user","content":"'"$ESCAPED_ISSUE_BODY"'"}'
          echo "USER: $ESCAPED_ISSUE_BODY"
          echo "::set-output name=USER_MESSAGE::$USER_MESSAGE"

      - name: Create Component (GPT 3.5 Turbo)
        id: create_component_api_call
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          RESPONSE=$(curl "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-3.5-turbo",
              "messages": [${{ steps.setup.outputs.SYSTEM_MESSAGE }}, ${{ steps.setup.outputs.USER_MESSAGE }}]
            }' \
            --fail)
          RESPONSE_BODY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          CODE_BLOCK=$(echo -e "$RESPONSE_BODY" | sed -n '/^```[a-zA-Z]*$/,/^```$/p' | sed '/^```[a-zA-Z]*\|^```$/d')
          ESCAPED_CODE_BLOCK=$(echo -e "$CODE_BLOCK" | sed 's/"/\\"/g; s/`/\\`/g; s/\$/\\$/g' | awk '{printf "%s\\n", $0}')
          echo "::set-output name=response::$ESCAPED_CODE_BLOCK"
          ASSISTANT_MESSAGE='{"role":"assistant","content":"'"$ESCAPED_CODE_BLOCK"'"}'
          echo "ASSISTANT: $ASSISTANT_MESSAGE"
          echo "::set-output name=ASSISTANT_MESSAGE::$ASSISTANT_MESSAGE"
          COMPONENT_NAME=$(echo -e "$RESPONSE_BODY" | sed -n 's/.*export default \([a-zA-Z_$][0-9a-zA-Z_$]*\).*/\1/p')
          echo "::set-output name=COMPONENT_NAME::$COMPONENT_NAME"

      - name: Create Storybook (GPT 3.5 Turbo)
        id: create_storybook_api_call
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          STORYBOOK_FOLLOW_UP_PROMPT='Can you create a storybook for the above component using import ${{ steps.setup.create_component_api_call.COMPONENT_NAME }}, { ${{ steps.setup.create_component_api_call.ASSISTANT_MESSAGE }}Props } from "../${{ steps.setup.create_component_api_call.ASSISTANT_MESSAGE }}"'
          RESPONSE=$(curl "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-3.5-turbo",
              "messages": [${{ steps.setup.outputs.SYSTEM_MESSAGE }}, ${{ steps.setup.outputs.USER_MESSAGE }}, ${{ steps.setup.create_component_api_call.ASSISTANT_MESSAGE }}, { role: "user", content:"'"$STORYBOOK_FOLLOW_UP_PROMPT"'"}]
            }' \
            --fail)
          RESPONSE_BODY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "$RESPONSE_BODY"
          echo "----------------------"
          CODE_BLOCK=$(echo -e "$RESPONSE_BODY" | sed -n '/^```[a-zA-Z]*$/,/^```$/p' | sed '/^```[a-zA-Z]*\|^```$/d')
          echo "$CODE_BLOCK"
          echo "----------------------"
          ESCAPED_CODE_BLOCK=$(echo -e "$CODE_BLOCK" | sed 's/"/\\"/g; s/`/\\`/g; s/\$/\\$/g' | awk '{printf "%s\\n", $0}')
          echo "$ESCAPED_CODE_BLOCK"
          echo "::set-output name=response::$ESCAPED_CODE_BLOCK"
          COMPONENT_NAME=$(echo -e "$RESPONSE_BODY" | sed -n 's/.*export default \([a-zA-Z_$][0-9a-zA-Z_$]*\).*/\1/p')
          echo "::set-output name=COMPONENT_NAME::$COMPONENT_NAME"
      # TODO Create Storybook
      # TODO Format file with precommit hooks

      # TODO Split Update file in git up into multiple steps
      - name: Update file in git
        env:
          GH_API_KEY: ${{ secrets.GH_API_KEY }}
        run: |
          git clone https://${{ env.GH_API_KEY }}@github.com/${{ steps.setup.outputs.ORG_NAME }}/${{ steps.setup.outputs.REPO_NAME }}.git
          cd nextjs-ai-starter
          git config --global user.email "brettlamy@gmail.com"
          git config --global user.name "Brett Lamy"
          git checkout -b issue-${{ github.event.issue.number }}-update
          echo -e "${{ steps.create_component_api_call.outputs.response }}" > src/components/atoms/${{ steps.create_component_api_call.outputs.COMPONENT_NAME }}.tsx
          echo -e "${{ steps.create_storybook_api_call.outputs.response }}" > src/components/atoms/__tests__/${{ steps.create_component_api_call.outputs.COMPONENT_NAME }}.stories.tsx
          npm run prettier
          git add .
          git commit -m "${{ github.event.issue.title }} - closes #${{ github.event.issue.number }}"
          git push origin issue-${{ github.event.issue.number }}-update

      - name: Create pull request
        env:
          GH_API_KEY: ${{ secrets.GH_API_KEY }}
        run: |
          curl https://api.github.com/repos/${{ steps.setup.outputs.ORG_NAME }}/${{ steps.setup.outputs.REPO_NAME }}/pulls -H "Authorization: token ${{ env.GH_API_KEY }}" -H "Accept: application/vnd.github+json" -X POST -d '{"title":"${{ github.event.issue.title }}", "body":"${{ steps.setup.outputs.ESCAPED_ISSUE_BODY }}", "head":"issue-${{ github.event.issue.number }}-update", "base":"main"}'
